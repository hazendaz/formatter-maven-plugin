<!--

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->

#set ($d = "$")

Plugin Usage
============

The following instructions describe how to use the plugin in its simplest
configuration. The following pom section will be able to get you started using
the plugin.

```xml
<project ...>
    ...
    <plugins>
      <plugin>
        <groupId>net.revelc.code.formatter</groupId>
        <artifactId>formatter-maven-plugin</artifactId>
        <version>${project.version}</version>
      </plugin>
    </plugins>
    ...
</project>
```

With this configuration, java source files in `src/main/java` and
`src/test/java` of the project will be formatted using the default compiler
version (1.8) and line ending of the current system.

Run the plugin with the `format` goal.

```
mvn formatter:format
```

In order to format the source files during the build, include the `format` goal
in the plugin executions.

```xml
<project ...>
    ...
    <plugins>
      <plugin>
        <groupId>net.revelc.code.formatter</groupId>
        <artifactId>formatter-maven-plugin</artifactId>
        <version>${project.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>format</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
    ...
</project>
```

The source files will be formatted prior to compilation in the build lifecycle.

Run the plugin during the build with the `compile` goal.

```
mvn compile
```

```
mvn formatter:validate
```

In order to validate the source files during the build, include the `validate`
goal in the plugin executions.

```xml
<project ...>
    ...
    <plugins>
      <plugin>
        <groupId>net.revelc.code.formatter</groupId>
        <artifactId>formatter-maven-plugin</artifactId>
        <version>${project.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>validate</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
    ...
</project>
```

If you want to override the default plugin behavior, check out
[custom configurations][examples] and [how to configure][plugin-info] it.

[examples]: ./examples.html
[plugin-info]: ./plugin-info.html
